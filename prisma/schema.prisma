// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev
model Estado {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(50)
  sigla     String    @unique
  situacao  String?   @db.Char(1)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  Regional             Regional[]
  FormularioEstado     FormularioEstado[]
  MunicipioSA          MunicipioSA[]
  PeriodoPreenchimento PeriodoPreenchimento[]
}

model Regional {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(50)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  estado Estado @relation(fields: [estadoId], references: [id])

  estadoId  Int
  Municipio Municipio[]
}

model Municipio {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(50)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  regional Regional @relation(fields: [regionalId], references: [id])

  regionalId Int
  Escola     Escola[]
  Professor  Professor[]
}

model MunicipioSA {
  id       Int        @id
  nome     String
  estadoId Int
  estado   Estado     @relation(fields: [estadoId], references: [id])
  EscolaSA EscolaSA[]
}

model EscolaSA {
  id            Int         @id @default(autoincrement())
  inep          Int
  nome          String
  municipioSaId Int
  municipioSA   MunicipioSA @relation(fields: [municipioSaId], references: [id])
  TurmaSA       TurmaSA[]
}

model TurmaSA {
  id         Int      @id @default(autoincrement())
  nome       String
  escolaSaId Int
  escolaSA   EscolaSA @relation(fields: [escolaSaId], references: [id])
}

model Escola {
  id              Int               @id @default(autoincrement())
  nome            String            @db.VarChar(150)
  codigoMec       String            @unique
  nomeRegional    String?           @db.VarChar(80)
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @default(now())
  municipio       Municipio         @relation(fields: [municipioId], references: [id])
  municipioId     Int
  Turma           Turma[]
  ProfessorEscola ProfessorEscola[]
}

model Turma {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(150)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  escola   Escola  @relation(fields: [escolaId], references: [id])
  escolaId Int
  Aluno    Aluno[]
}

model Aluno {
  id               Int               @id @default(autoincrement())
  nome             String            @db.VarChar(200)
  dataNascimento   String            @db.VarChar(10)
  matricula        String            @db.VarChar(50)
  nomeMae          String            @db.VarChar(200)
  cpf              String?           @db.VarChar(11)
  possuiFormulario String?           @db.Char(1)
  turma            Turma             @relation(fields: [turmaId], references: [id])
  turmaId          Int
  RespostaAluno    RespostaAluno[]
  formularios      FormularioAluno[]
}

model Professor {
  id                Int                   @id @default(autoincrement())
  nome              String                @db.VarChar(200)
  dataNascimento    String?               @db.VarChar(10)
  cpf               String?               @db.VarChar(11)
  masp              String?               @db.VarChar(20)
  matricula         String?               @db.VarChar(20)
  possuiFormulario  String?               @db.Char(1)
  nomeRegional      String?               @db.VarChar(80)
  municipio         Municipio             @relation(fields: [municipioId], references: [id])
  celular           String?               @db.VarChar(11)
  email             String?               @db.VarChar(150)
  municipioId       Int
  formularios       FormularioProfessor[]
  RespostaProfessor RespostaProfessor[]
  ProfessorEscola   ProfessorEscola[]
}

model ProfessorEscola {
  professor Professor @relation(fields: [professorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  escola    Escola    @relation(fields: [escolaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  professorId Int
  escolaId    Int

  @@id([escolaId, professorId])
}

model FormularioAluno {
  aluno        Aluno      @relation(fields: [alunoId], references: [id])
  formulario   Formulario @relation(fields: [formularioId], references: [id])
  situacao     Int
  alunoId      Int
  formularioId Int

  @@id([alunoId, formularioId])
}

model FormularioProfessor {
  professor    Professor  @relation(fields: [professorId], references: [id])
  formulario   Formulario @relation(fields: [formularioId], references: [id])
  situacao     Int
  professorId  Int
  formularioId Int

  @@id([professorId, formularioId])
}

model Formulario {
  id                     Int                    @id @default(autoincrement())
  nome                   String                 @db.VarChar(100)
  tipo                   String                 @db.VarChar(10)
  FormularioEstado       FormularioEstado[]
  Pergunta               Pergunta[]
  alunos                 FormularioAluno[]
  professores            FormularioProfessor[]
  termo                  String?
  duracao                String?                @db.VarChar(20)
  meta                   Int?
  permiteSemAutenticacao String                 @db.Char(1)
  PeriodoPreenchimento   PeriodoPreenchimento[]
}

model FormularioEstado {
  id Int @id @default(autoincrement())

  estado   Estado @relation(fields: [estadoId], references: [id])
  estadoId Int

  formulario   Formulario @relation(fields: [formularioId], references: [id])
  formularioId Int
}

model TipoPergunta {
  id        Int        @id @default(autoincrement())
  descricao String     @db.VarChar(30)
  Pergunta  Pergunta[]
}

model Pergunta {
  id                Int                 @id @default(autoincrement())
  descricao         String
  numero            String              @db.VarChar(5)
  numeroComplemento String?             @db.VarChar(5)
  ordem             Int
  tipoPergunta      TipoPergunta        @relation(fields: [tipoPerguntaId], references: [id])
  tipoPerguntaId    Int
  timer             Int?
  valorMinimo       Int?
  valorMaximo       Int?
  step              Int?
  mascaraResposta   String?             @db.VarChar(30)
  bloco             Int
  identificador     String?             @db.VarChar(6)
  descricaoAuxiliar String?
  formulario        Formulario          @relation(fields: [formularioId], references: [id])
  formularioId      Int
  respostaAluno     RespostaAluno[]
  alternativa       Alternativa[]
  escutar           Escutar[]
  RespostaProfessor RespostaProfessor[]
}

model Escutar {
  id Int @id @default(autoincrement())

  pergunta Pergunta @relation(fields: [perguntaId], references: [id])

  escutarPerguntaId    Int
  escutarAlternativaId Int
  perguntaId           Int
}

model Alternativa {
  id         Int      @id @default(autoincrement())
  descricao  String
  numero     String   @db.VarChar(5)
  ordem      Int
  pergunta   Pergunta @relation(fields: [perguntaId], references: [id])
  perguntaId Int
}

model RespostaAluno {
  descricao  String    @db.VarChar(50)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  pergunta   Pergunta  @relation(fields: [perguntaId], references: [id])
  perguntaId Int
  aluno      Aluno     @relation(fields: [alunoId], references: [id])
  alunoId    Int

  @@id([perguntaId, alunoId])
}

model RespostaProfessor {
  descricao   String    @db.VarChar(50)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  pergunta    Pergunta  @relation(fields: [perguntaId], references: [id])
  perguntaId  Int
  professor   Professor @relation(fields: [professorId], references: [id])
  professorId Int

  @@id([perguntaId, professorId])
}

model PeriodoPreenchimento {
  dataFinal    DateTime?  @default(now())
  formulario   Formulario @relation(fields: [formularioId], references: [id])
  formularioId Int
  estado       Estado     @relation(fields: [estadoId], references: [id])
  estadoId     Int

  @@id([estadoId, formularioId])
}
